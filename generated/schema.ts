// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IROSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IROSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type IROSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IROSet", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): IROSet | null {
    return changetype<IROSet | null>(store.get("IROSet", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get entityIds(): Array<Bytes> | null {
    let value = this.get("entityIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set entityIds(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("entityIds");
    } else {
      this.set("entityIds", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get iroIds(): Array<BigInt> | null {
    let value = this.get("iroIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set iroIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("iroIds");
    } else {
      this.set("iroIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class UserShare extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserShare must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserShare", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): UserShare | null {
    return changetype<UserShare | null>(
      store.get("UserShare", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get committedFunds(): BigInt {
    let value = this.get("committedFunds");
    return value!.toBigInt();
  }

  set committedFunds(value: BigInt) {
    this.set("committedFunds", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get share(): BigDecimal {
    let value = this.get("share");
    return value!.toBigDecimal();
  }

  set share(value: BigDecimal) {
    this.set("share", Value.fromBigDecimal(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    return value!.toBoolean();
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }

  get iro(): Bytes {
    let value = this.get("iro");
    return value!.toBytes();
  }

  set iro(value: Bytes) {
    this.set("iro", Value.fromBytes(value));
  }
}

export class IRO extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IRO entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type IRO must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IRO", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): IRO | null {
    return changetype<IRO | null>(store.get("IRO", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get iroId(): BigInt {
    let value = this.get("iroId");
    return value!.toBigInt();
  }

  set iroId(value: BigInt) {
    this.set("iroId", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get listingOwner(): Bytes {
    let value = this.get("listingOwner");
    return value!.toBytes();
  }

  set listingOwner(value: Bytes) {
    this.set("listingOwner", Value.fromBytes(value));
  }

  get currencyDecimals(): BigInt {
    let value = this.get("currencyDecimals");
    return value!.toBigInt();
  }

  set currencyDecimals(value: BigInt) {
    this.set("currencyDecimals", Value.fromBigInt(value));
  }

  get start(): BigInt {
    let value = this.get("start");
    return value!.toBigInt();
  }

  set start(value: BigInt) {
    this.set("start", Value.fromBigInt(value));
  }

  get end(): BigInt {
    let value = this.get("end");
    return value!.toBigInt();
  }

  set end(value: BigInt) {
    this.set("end", Value.fromBigInt(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get treasuryFee(): BigInt {
    let value = this.get("treasuryFee");
    return value!.toBigInt();
  }

  set treasuryFee(value: BigInt) {
    this.set("treasuryFee", Value.fromBigInt(value));
  }

  get operationFee(): BigInt {
    let value = this.get("operationFee");
    return value!.toBigInt();
  }

  set operationFee(value: BigInt) {
    this.set("operationFee", Value.fromBigInt(value));
  }

  get targetFunding(): BigInt {
    let value = this.get("targetFunding");
    return value!.toBigInt();
  }

  set targetFunding(value: BigInt) {
    this.set("targetFunding", Value.fromBigInt(value));
  }

  get unitPrice(): BigInt {
    let value = this.get("unitPrice");
    return value!.toBigInt();
  }

  set unitPrice(value: BigInt) {
    this.set("unitPrice", Value.fromBigInt(value));
  }

  get totalFunding(): BigInt {
    let value = this.get("totalFunding");
    return value!.toBigInt();
  }

  set totalFunding(value: BigInt) {
    this.set("totalFunding", Value.fromBigInt(value));
  }

  get shares(): Array<Bytes> | null {
    let value = this.get("shares");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set shares(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get fundsWithdrawn(): boolean {
    let value = this.get("fundsWithdrawn");
    return value!.toBoolean();
  }

  set fundsWithdrawn(value: boolean) {
    this.set("fundsWithdrawn", Value.fromBoolean(value));
  }

  get realEstateId(): BigInt | null {
    let value = this.get("realEstateId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set realEstateId(value: BigInt | null) {
    if (!value) {
      this.unset("realEstateId");
    } else {
      this.set("realEstateId", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Balance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Balance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Balance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Balance", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Balance | null {
    return changetype<Balance | null>(store.get("Balance", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}

export class RealEstateAccount extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RealEstateAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RealEstateAccount must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RealEstateAccount", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): RealEstateAccount | null {
    return changetype<RealEstateAccount | null>(
      store.get("RealEstateAccount", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balances(): Array<Bytes> | null {
    let value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set balances(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("balances");
    } else {
      this.set("balances", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}
